--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -2015,6 +2015,10 @@ retry:
 	skb->priority = sk->sk_priority;
 	skb->mark = sk->sk_mark;
 
+	if ((msg->msg_flags >> 16) != 0) {
+		skb->priority = (msg->msg_flags >> 16);
+	}
+
 	sock_tx_timestamp(sk, sockc.tsflags, &skb_shinfo(skb)->tx_flags);
 
 	if (unlikely(extra_len == 4))
@@ -2789,6 +2793,11 @@ static int tpacket_snd(struct packet_soc
 		}
 		tp_len = tpacket_fill_skb(po, skb, ph, dev, data, tp_len, proto,
 					  addr, hlen, copylen, &sockc);
+
+		if ((msg->msg_flags >> 16) != 0) {
+			skb->priority = (msg->msg_flags >> 16);
+		}
+
 		if (likely(tp_len >= 0) &&
 		    tp_len > dev->mtu + reserve &&
 		    !po->has_vnet_hdr &&
@@ -3010,6 +3019,10 @@ static int packet_snd(struct socket *soc
 	skb->priority = sk->sk_priority;
 	skb->mark = sockc.mark;
 
+	if ((msg->msg_flags >> 16) != 0) {
+		skb->priority = (msg->msg_flags >> 16);
+	}
+
 	if (has_vnet_hdr) {
 		err = virtio_net_hdr_to_skb(skb, &vnet_hdr, vio_le());
 		if (err)
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -3102,12 +3102,12 @@ static inline void netdev_reset_queue(st
  */
 static inline u16 netdev_cap_txqueue(struct net_device *dev, u16 queue_index)
 {
-	if (unlikely(queue_index >= dev->real_num_tx_queues)) {
-		net_warn_ratelimited("%s selects TX queue %d, but real number of TX queues is %d\n",
-				     dev->name, queue_index,
-				     dev->real_num_tx_queues);
-		return 0;
-	}
+	// if (unlikely(queue_index >= dev->real_num_tx_queues)) {
+	// 	net_warn_ratelimited("%s selects TX queue %d, but real number of TX queues is %d\n",
+	// 			     dev->name, queue_index,
+	// 			     dev->real_num_tx_queues);
+	// 	return 0;
+	// }
 
 	return queue_index;
 }
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1463,7 +1463,7 @@ struct ieee80211_vif {
 	bool mu_mimo_owner;
 
 	u8 cab_queue;
-	u8 hw_queue[IEEE80211_NUM_ACS];
+	u8 hw_queue[64];
 
 	struct ieee80211_txq *txq;
 
