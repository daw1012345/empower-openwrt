--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -2015,6 +2015,10 @@ retry:
 	skb->priority = sk->sk_priority;
 	skb->mark = sk->sk_mark;
 
+	if ((msg->msg_flags >> 16) != 0) {
+		skb->priority = (msg->msg_flags >> 16);
+	}
+
 	sock_tx_timestamp(sk, sockc.tsflags, &skb_shinfo(skb)->tx_flags);
 
 	if (unlikely(extra_len == 4))
@@ -2789,6 +2793,11 @@ static int tpacket_snd(struct packet_soc
 		}
 		tp_len = tpacket_fill_skb(po, skb, ph, dev, data, tp_len, proto,
 					  addr, hlen, copylen, &sockc);
+
+		if ((msg->msg_flags >> 16) != 0) {
+			skb->priority = (msg->msg_flags >> 16);
+		}
+		
 		if (likely(tp_len >= 0) &&
 		    tp_len > dev->mtu + reserve &&
 		    !po->has_vnet_hdr &&
@@ -3010,6 +3019,10 @@ static int packet_snd(struct socket *soc
 	skb->priority = sk->sk_priority;
 	skb->mark = sockc.mark;
 
+	if ((msg->msg_flags >> 16) != 0) {
+		skb->priority = (msg->msg_flags >> 16);
+	}
+
 	if (has_vnet_hdr) {
 		err = virtio_net_hdr_to_skb(skb, &vnet_hdr, vio_le());
 		if (err)
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -2112,9 +2112,7 @@ static int parse_txq_params(struct nlatt
 	txq_params->cwmax = nla_get_u16(tb[NL80211_TXQ_ATTR_CWMAX]);
 	txq_params->aifs = nla_get_u8(tb[NL80211_TXQ_ATTR_AIFS]);
 
-	if (ac >= NL80211_NUM_ACS)
-		return -EINVAL;
-	txq_params->ac = array_index_nospec(ac, NL80211_NUM_ACS);
+	txq_params->ac = ac;
 	return 0;
 }
 
@@ -2368,10 +2366,6 @@ static int nl80211_set_wiphy(struct sk_b
 		if (!netdev)
 			return -EINVAL;
 
-		if (netdev->ieee80211_ptr->iftype != NL80211_IFTYPE_AP &&
-		    netdev->ieee80211_ptr->iftype != NL80211_IFTYPE_P2P_GO)
-			return -EINVAL;
-
 		if (!netif_running(netdev))
 			return -ENETDOWN;
 
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -2100,9 +2100,6 @@ static int ieee80211_set_txq_params(stru
 	if (!local->ops->conf_tx)
 		return -EOPNOTSUPP;
 
-	if (local->hw.queues < IEEE80211_NUM_ACS)
-		return -EOPNOTSUPP;
-
 	memset(&p, 0, sizeof(p));
 	p.aifs = params->aifs;
 	p.cw_max = params->cwmax;
@@ -2115,7 +2112,7 @@ static int ieee80211_set_txq_params(stru
 	 */
 	p.uapsd = false;
 
-	sdata->tx_conf[params->ac] = p;
+	// sdata->tx_conf[params->ac] = p;
 	if (drv_conf_tx(local, sdata, params->ac, &p)) {
 		wiphy_debug(local->hw.wiphy,
 			    "failed to set TX queue parameters for AC %d\n",
@@ -2123,7 +2120,7 @@ static int ieee80211_set_txq_params(stru
 		return -EINVAL;
 	}
 
-	ieee80211_bss_info_change_notify(sdata, BSS_CHANGED_QOS);
+	// ieee80211_bss_info_change_notify(sdata, BSS_CHANGED_QOS);
 
 	return 0;
 }
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -3102,10 +3102,10 @@ static inline void netdev_reset_queue(st
  */
 static inline u16 netdev_cap_txqueue(struct net_device *dev, u16 queue_index)
 {
-	if (unlikely(queue_index >= dev->real_num_tx_queues)) {
-		net_warn_ratelimited("%s selects TX queue %d, but real number of TX queues is %d\n",
-				     dev->name, queue_index,
-				     dev->real_num_tx_queues);
+	if (queue_index >= dev->real_num_tx_queues) {
+		// net_warn_ratelimited("%s selects TX queue %d, but real number of TX queues is %d\n",
+		// 		     dev->name, queue_index,
+		// 		     dev->real_num_tx_queues);
 		return 0;
 	}
 
