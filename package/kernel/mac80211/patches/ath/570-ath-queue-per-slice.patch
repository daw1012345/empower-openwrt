--- a/drivers/net/wireless/ath/ath9k/main.c
+++ b/drivers/net/wireless/ath/ath9k/main.c
@@ -764,6 +764,9 @@ static void ath9k_tx(struct ieee80211_hw
 	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *) skb->data;
 	unsigned long flags;
 
+	if (skb_get_queue_mapping(skb) >= EMP_NUM_USE_QUEUE)
+		printk(KERN_ERR "Invalid packet sent! Q=%u DNE.\n", skb_get_queue_mapping(skb));
+
 	if (sc->ps_enabled) {
 		/*
 		 * mac80211 does not set PM field for normal data frames, so we
@@ -819,6 +822,7 @@ static void ath9k_tx(struct ieee80211_hw
 	txctl.sta = control->sta;
 
 	ath_dbg(common, XMIT, "transmitting packet, skb: %p\n", skb);
+	// printk(KERN_ERR "TX packet: %u", skb_get_queue_mapping(skb));
 
 	if (ath_tx_start(hw, skb, &txctl) != 0) {
 		ath_dbg(common, XMIT, "TX failed\n");
@@ -1245,7 +1249,7 @@ static void ath9k_assign_hw_queues(struc
 	if (!ath9k_is_chanctx_enabled())
 		return;
 
-	for (i = 0; i < IEEE80211_NUM_ACS; i++)
+	for (i = 0; i < EMP_NUM_USE_QUEUE; i++)
 		vif->hw_queue[i] = i;
 
 	if (vif->type == NL80211_IFTYPE_AP ||
@@ -1650,7 +1654,7 @@ static int ath9k_conf_tx(struct ieee8021
 	struct ath9k_tx_queue_info qi;
 	int ret = 0;
 
-	if (queue >= IEEE80211_NUM_ACS)
+	if (queue >= EMP_NUM_USE_QUEUE)
 		return 0;
 
 	txq = sc->tx.txq_map[queue];
@@ -1665,8 +1669,7 @@ static int ath9k_conf_tx(struct ieee8021
 	qi.tqi_cwmax = params->cw_max;
 	qi.tqi_burstTime = params->txop * 32;
 
-	ath_dbg(common, CONFIG,
-		"Configure tx [queue/halq] [%d/%d], aifs: %d, cw_min: %d, cw_max: %d, txop: %d\n",
+	printk(KERN_ERR "Configure tx [queue/halq] [%d/%d], aifs: %d, cw_min: %d, cw_max: %d, txop: %d\n",
 		queue, txq->axq_qnum, params->aifs, params->cw_min,
 		params->cw_max, params->txop);
 
@@ -2446,7 +2449,7 @@ static int ath9k_add_chanctx(struct ieee
 		*ptr = ctx;
 		ctx->assigned = true;
 		pos = ctx - &sc->chanctx[0];
-		ctx->hw_queue_base = pos * IEEE80211_NUM_ACS;
+		ctx->hw_queue_base = pos * EMP_NUM_USE_QUEUE;
 
 		ath_dbg(common, CHAN_CTX,
 			"Add channel context: %d MHz\n",
@@ -2522,7 +2525,7 @@ static int ath9k_assign_vif_chanctx(stru
 	ctx->nvifs_assigned++;
 	list_add_tail(&avp->list, &ctx->vifs);
 	ath9k_calculate_summary_state(sc, ctx);
-	for (i = 0; i < IEEE80211_NUM_ACS; i++)
+	for (i = 0; i < EMP_NUM_USE_QUEUE; i++)
 		vif->hw_queue[i] = ctx->hw_queue_base + i;
 
 	mutex_unlock(&sc->mutex);
@@ -2553,7 +2556,7 @@ static void ath9k_unassign_vif_chanctx(s
 	ctx->nvifs_assigned--;
 	list_del(&avp->list);
 	ath9k_calculate_summary_state(sc, ctx);
-	for (ac = 0; ac < IEEE80211_NUM_ACS; ac++)
+	for (ac = 0; ac < EMP_NUM_USE_QUEUE; ac++)
 		vif->hw_queue[ac] = IEEE80211_INVAL_HW_QUEUE;
 
 	mutex_unlock(&sc->mutex);
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -1246,9 +1246,11 @@ static u16 ieee80211_monitor_select_queu
 	struct ieee80211_hdr *hdr;
 	struct ieee80211_radiotap_header *rtap = (void *)skb->data;
 
-	if (local->hw.queues < IEEE80211_NUM_ACS)
+	if (skb->priority >= local->hw.queues)
 		return 0;
 
+	return skb->priority;
+
 	if (skb->len < 4 ||
 	    skb->len < le16_to_cpu(rtap->it_len) + 2 /* frame control */)
 		return 0; /* doesn't matter, frame will be dropped */
@@ -1849,7 +1851,7 @@ int ieee80211_if_add(struct ieee80211_lo
 			if_setup = ieee80211_if_setup;
 
 		if (local->hw.queues >= IEEE80211_NUM_ACS)
-			txqs = IEEE80211_NUM_ACS;
+			txqs = local->hw.queues;
 
 		ndev = alloc_netdev_mqs(size + txq_size,
 					name, name_assign_type,
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -2304,9 +2304,7 @@ static int parse_txq_params(struct nlatt
 	txq_params->cwmax = nla_get_u16(tb[NL80211_TXQ_ATTR_CWMAX]);
 	txq_params->aifs = nla_get_u8(tb[NL80211_TXQ_ATTR_AIFS]);
 
-	if (ac >= NL80211_NUM_ACS)
-		return -EINVAL;
-	txq_params->ac = array_index_nospec(ac, NL80211_NUM_ACS);
+	txq_params->ac = ac;
 	return 0;
 }
 
@@ -2570,9 +2568,10 @@ static int nl80211_set_wiphy(struct sk_b
 		if (!netdev)
 			return -EINVAL;
 
-		if (netdev->ieee80211_ptr->iftype != NL80211_IFTYPE_AP &&
-		    netdev->ieee80211_ptr->iftype != NL80211_IFTYPE_P2P_GO)
-			return -EINVAL;
+		// We want to allow this in monitor mode as well
+		// if (netdev->ieee80211_ptr->iftype != NL80211_IFTYPE_AP &&
+		//     netdev->ieee80211_ptr->iftype != NL80211_IFTYPE_P2P_GO)
+		// 	return -EINVAL;
 
 		if (!netif_running(netdev))
 			return -ENETDOWN;
--- a/net/mac80211/driver-ops.c
+++ b/net/mac80211/driver-ops.c
@@ -166,8 +166,8 @@ int drv_conf_tx(struct ieee80211_local *
 
 	might_sleep();
 
-	if (!check_sdata_in_driver(sdata))
-		return -EIO;
+	// if (!check_sdata_in_driver(sdata))
+	// 	return -EIO;
 
 	if (params->cw_min == 0 || params->cw_min > params->cw_max) {
 		/*
--- a/drivers/net/wireless/ath/ath9k/xmit.c
+++ b/drivers/net/wireless/ath/ath9k/xmit.c
@@ -1760,16 +1760,10 @@ struct ath_txq *ath_txq_setup(struct ath
 {
 	struct ath_hw *ah = sc->sc_ah;
 	struct ath9k_tx_queue_info qi;
-	static const int subtype_txq_to_hwq[] = {
-		[IEEE80211_AC_BE] = ATH_TXQ_AC_BE,
-		[IEEE80211_AC_BK] = ATH_TXQ_AC_BK,
-		[IEEE80211_AC_VI] = ATH_TXQ_AC_VI,
-		[IEEE80211_AC_VO] = ATH_TXQ_AC_VO,
-	};
 	int axq_qnum, i;
 
 	memset(&qi, 0, sizeof(qi));
-	qi.tqi_subtype = subtype_txq_to_hwq[subtype];
+	qi.tqi_subtype = subtype;
 	qi.tqi_aifs = ATH9K_TXQ_USEDEFAULT;
 	qi.tqi_cwmin = ATH9K_TXQ_USEDEFAULT;
 	qi.tqi_cwmax = ATH9K_TXQ_USEDEFAULT;
@@ -1986,6 +1980,9 @@ void ath_txq_schedule(struct ath_softc *
 	struct ath_acq *acq;
 	bool active = AIRTIME_ACTIVE(sc->airtime_flags);
 
+	printk_once(KERN_ERR "Ignoring request to schedule - queues should be empty!\n");
+	return;
+
 	if (txq->mac80211_qnum < 0)
 		return;
 
@@ -2051,6 +2048,9 @@ void ath_txq_schedule_all(struct ath_sof
 	struct ath_txq *txq;
 	int i;
 
+	printk_once(KERN_ERR "Ignoring request to schedule all - queues should be empty!\n");
+	return;
+
 	for (i = 0; i < IEEE80211_NUM_ACS; i++) {
 		txq = sc->tx.txq_map[i];
 
@@ -2400,6 +2400,12 @@ int ath_tx_start(struct ieee80211_hw *hw
 	}
 
 	ath_txq_lock(sc, txq);
+
+	if (txq->pending_frames > EMP_MAX_BUF_USAGE) {
+		ieee80211_free_txskb(sc->hw, skb);
+		goto out;
+	}
+	
 	if (txq == sc->tx.txq_map[q]) {
 		fi->txq = q;
 		++txq->pending_frames;
--- a/drivers/net/wireless/ath/ath9k/ath9k.h
+++ b/drivers/net/wireless/ath/ath9k/ath9k.h
@@ -114,6 +114,9 @@ int ath_descdma_setup(struct ath_softc *
 #define ATH_TXFIFO_DEPTH           8
 #define ATH_TX_ERROR               0x01
 
+#define EMP_NUM_USE_QUEUE  5
+#define EMP_MAX_BUF_USAGE  32
+
 #define ATH_AIRTIME_QUANTUM        300 /* usec */
 
 /* Stop tx traffic 1ms before the GO goes away */
@@ -265,7 +268,7 @@ struct ath_node {
 
 	bool sleeping;
 	bool no_ps_filter;
-	s64 airtime_deficit[IEEE80211_NUM_ACS];
+	s64 airtime_deficit[EMP_NUM_USE_QUEUE];
 	u32 airtime_rx_start;
 
 #ifdef CPTCFG_ATH9K_STATION_STATISTICS
@@ -285,7 +288,6 @@ struct ath_tx_control {
 	u8 paprd;
 };
 
-
 /**
  * @txq_map:  Index is mac80211 queue number.  This is
  *  not necessarily the same as the hardware queue number
@@ -297,9 +299,9 @@ struct ath_tx {
 	struct list_head txbuf;
 	struct ath_txq txq[ATH9K_NUM_TX_QUEUES];
 	struct ath_descdma txdma;
-	struct ath_txq *txq_map[IEEE80211_NUM_ACS];
+	struct ath_txq *txq_map[EMP_NUM_USE_QUEUE];
 	struct ath_txq *uapsdq;
-	u16 max_aggr_framelen[IEEE80211_NUM_ACS][4][32];
+	u16 max_aggr_framelen[EMP_NUM_USE_QUEUE][4][32];
 };
 
 struct ath_rx_edma {
@@ -336,7 +338,7 @@ struct ath_acq {
 struct ath_chanctx {
 	struct cfg80211_chan_def chandef;
 	struct list_head vifs;
-	struct ath_acq acq[IEEE80211_NUM_ACS];
+	struct ath_acq acq[EMP_NUM_USE_QUEUE];
 	int hw_queue_base;
 
 	/* do not dereference, use for comparison only */
--- a/drivers/net/wireless/ath/ath9k/link.c
+++ b/drivers/net/wireless/ath/ath9k/link.c
@@ -28,7 +28,7 @@ static bool ath_tx_complete_check(struct
 	if (sc->tx99_state)
 		return true;
 
-	for (i = 0; i < IEEE80211_NUM_ACS; i++) {
+	for (i = 0; i < EMP_NUM_USE_QUEUE; i++) {
 		txq = sc->tx.txq_map[i];
 
 		ath_txq_lock(sc, txq);
--- a/drivers/net/wireless/ath/ath9k/init.c
+++ b/drivers/net/wireless/ath/ath9k/init.c
@@ -408,15 +408,21 @@ static int ath9k_init_queues(struct ath_
 	int i = 0;
 
 	sc->beacon.beaconq = ath9k_hw_beaconq_setup(sc->sc_ah);
-	sc->beacon.cabq = ath_txq_setup(sc, ATH9K_TX_QUEUE_CAB, 0);
-	ath_cabq_update(sc);
+	// sc->beacon.cabq = ath_txq_setup(sc, ATH9K_TX_QUEUE_CAB, 0);
+	// ath_cabq_update(sc);
 
-	sc->tx.uapsdq = ath_txq_setup(sc, ATH9K_TX_QUEUE_UAPSD, 0);
+	// sc->tx.uapsdq = ath_txq_setup(sc, ATH9K_TX_QUEUE_UAPSD, 0);
 
 	for (i = 0; i < IEEE80211_NUM_ACS; i++) {
 		sc->tx.txq_map[i] = ath_txq_setup(sc, ATH9K_TX_QUEUE_DATA, i);
 		sc->tx.txq_map[i]->mac80211_qnum = i;
+		printk(KERN_ERR "Init queue. slice=[%u], HALQ=[%u]", i, sc->tx.txq_map[i]->axq_qnum);
 	}
+
+	sc->tx.txq_map[4] = ath_txq_setup(sc, ATH9K_TX_QUEUE_DATA, (ATH9K_NUM_TX_QUEUES - 2));
+	sc->tx.txq_map[4]->mac80211_qnum = 4;
+	printk(KERN_ERR "Init queue. slice=[%u], HALQ=[%u]", 4, sc->tx.txq_map[4]->axq_qnum);
+
 	return 0;
 }
 
@@ -986,7 +992,7 @@ static void ath9k_set_hw_capab(struct at
 	hw->wiphy->flags |= WIPHY_FLAG_HAS_CHANNEL_SWITCH;
 	hw->wiphy->flags |= WIPHY_FLAG_AP_UAPSD;
 
-	hw->queues = 4;
+	hw->queues = EMP_NUM_USE_QUEUE;
 	hw->max_rates = 4;
 	hw->max_listen_interval = 10;
 	hw->max_rate_tries = 10;
--- a/drivers/net/wireless/ath/ath9k/channel.c
+++ b/drivers/net/wireless/ath/ath9k/channel.c
@@ -1399,7 +1399,7 @@ void ath9k_chanctx_stop_queues(struct at
 		ieee80211_stop_queue(sc->hw,
 				     sc->hw->offchannel_tx_hw_queue);
 	} else {
-		for (i = 0; i < IEEE80211_NUM_ACS; i++)
+		for (i = 0; i < EMP_NUM_USE_QUEUE; i++)
 			ieee80211_stop_queue(sc->hw,
 					     ctx->hw_queue_base + i);
 	}
@@ -1418,7 +1418,7 @@ void ath9k_chanctx_wake_queues(struct at
 		ieee80211_wake_queue(sc->hw,
 				     sc->hw->offchannel_tx_hw_queue);
 	} else {
-		for (i = 0; i < IEEE80211_NUM_ACS; i++)
+		for (i = 0; i < EMP_NUM_USE_QUEUE; i++)
 			ieee80211_wake_queue(sc->hw,
 					     ctx->hw_queue_base + i);
 	}
--- a/drivers/net/wireless/ath/ath9k/debug.c
+++ b/drivers/net/wireless/ath/ath9k/debug.c
@@ -639,18 +639,14 @@ static int read_file_queues(struct seq_f
 	struct ath_softc *sc = hw->priv;
 	struct ath_txq *txq;
 	int i;
-	static const char *qname[4] = {
-		"VO", "VI", "BE", "BK"
-	};
 
-	for (i = 0; i < IEEE80211_NUM_ACS; i++) {
+	for (i = 0; i < EMP_NUM_USE_QUEUE; i++) {
 		txq = sc->tx.txq_map[i];
-		seq_printf(file, "(%s):  ", qname[i]);
 		print_queue(sc, txq, file);
 	}
 
-	seq_puts(file, "(CAB): ");
-	print_queue(sc, sc->beacon.cabq, file);
+	// seq_puts(file, "(CAB): ");
+	// print_queue(sc, sc->beacon.cabq, file);
 
 	return 0;
 }
--- a/drivers/net/wireless/ath/ath9k/beacon.c
+++ b/drivers/net/wireless/ath/ath9k/beacon.c
@@ -395,6 +395,9 @@ void ath9k_beacon_tasklet(unsigned long
 	bool edma = !!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA);
 	int slot;
 
+	printk_once(KERN_ERR "Ifnoring beacon tasklet!\n");
+	return;
+
 	if (test_bit(ATH_OP_HW_RESET, &common->op_flags)) {
 		ath_dbg(common, RESET,
 			"reset work is pending, skip beaconing now\n");
